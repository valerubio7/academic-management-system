@startuml extended
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
hide circle

title Academic Management System - Class Diagram

package users {
  class CustomUser {
    +role: CharField(20)
    +dni: CharField(20) {unique}
    +phone: CharField(20)?
    +birth_date: Date?
    +address: Text?
  }

  class Student {
    +student_id: CharField(20) {pk}
    +enrollment_date: Date
    -- relations --
    +user: OneToOne(CustomUser)
    +career: FK(Career)?
  }

  class Professor {
    +professor_id: CharField(20) {pk}
    +degree: CharField(100)
    +hire_date: Date
    +category: CharField(20)
    -- relations --
    +user: OneToOne(CustomUser)
    +subjects: M2M(Subject)
    +final_exams: M2M(FinalExam)
  }

  class Administrator {
    +administrator_id: CharField(20) {pk}
    +position: CharField(100)
    +hire_date: Date
    -- relations --
    +user: OneToOne(CustomUser)
  }

  enum UserRole {
    administrator
    professor
    student
  }

  enum ProfessorCategory {
    titular
    adjunct
    auxiliar
  }
}

package academics {
  class Faculty {
    +code: CharField(10) {pk}
    +name: CharField(100)
    +address: CharField(255)
    +phone: CharField(20)
    +email: Email
    +website: URL
    +dean: CharField(100)
    +established_date: Date
    +description: Text?
  }

  class Career {
    +code: CharField(10) {pk}
    +name: CharField(100)
    +director: CharField(100)
    +duration_years: PositiveInteger
    +description: Text?
    -- relations --
    +faculty: FK(Faculty)
  }

  class Subject {
    +code: CharField(10) {pk}
    +name: CharField(100)
    +year: PositiveSmallInteger
    +category: CharField(10)
    +period: CharField(10)
    +semanal_hours: PositiveInteger
    +description: Text?
    -- relations --
    +career: FK(Career)
  }

  enum SubjectCategory {
    obligatory
    elective
  }

  enum SubjectPeriod {
    first
    second
    annual
  }

  class FinalExam {
    +date: Date
    +location: CharField(255)
    +duration: Duration
    +call_number: PositiveSmallInteger
    +notes: Text?
    -- relations --
    +subject: FK(Subject)
  }

  class Grade {
    +promotion_grade: Decimal(5,2)?
    +status: CharField(10)
    +final_grade: Decimal(5,2)?
    +last_updated: DateTime(auto)
    +notes: Text?
    -- relations --
    +student: FK(Student)
    +subject: FK(Subject)
  }

  enum SubjectStatus {
    free
    regular
    promoted
  }
}

package inscriptions {
  class SubjectInscription {
    +inscription_date: Date(auto)
    -- relations --
    +student: FK(Student)
    +subject: FK(Subject)
  }

  class FinalExamInscription {
    +inscription_date: Date(auto)
    -- relations --
    +student: FK(Student)
    +final_exam: FK(FinalExam)
  }
}

' One-to-one (User profiles)
CustomUser "1" -- "0..1" Student : user
CustomUser "1" -- "0..1" Professor : user
CustomUser "1" -- "0..1" Administrator : user

' Academics hierarchy
Career "*" -- "1" Faculty : faculty
Subject "*" -- "1" Career : career
FinalExam "*" -- "1" Subject : subject
Student "0..*" -- "0..1" Career : career

' Many-to-many assignments
Professor "*" -- "*" Subject : subjects
Professor "*" -- "*" FinalExam : final_exams

' Grades (per student per subject)
Student "1" -- "*" Grade : grades
Subject "1" -- "*" Grade : grades

' Inscriptions
SubjectInscription "*" -- "1" Student : student
SubjectInscription "*" -- "1" Subject : subject
FinalExamInscription "*" -- "1" Student : student
FinalExamInscription "*" -- "1" FinalExam : final_exam

' Notes and constraints
note bottom of Grade
  unique_together: (student, subject)
  status in {free, regular, promoted}
end note

note bottom of SubjectInscription
  unique_together: (student, subject)
end note

note bottom of FinalExamInscription
  unique_together: (student, final_exam)
end note

' Enum dependencies
CustomUser ..> UserRole : role
Professor ..> ProfessorCategory : category
Subject ..> SubjectCategory : category
Subject ..> SubjectPeriod : period
Grade ..> SubjectStatus : status

@enduml
